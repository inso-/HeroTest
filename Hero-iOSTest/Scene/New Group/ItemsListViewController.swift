//
//  ItemsListViewController.swift
//  Hero-iOSTest
//
//  Created by inso on 17/12/2018.
//  Copyright (c) 2018 Thomas Moussajee. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Domain

protocol ItemsListDisplayLogic: class {
	func displayItems(viewModel: ItemsList.GetItems.ViewModel)
}

class ItemsListViewController: UIViewController, ItemsListDisplayLogic {
	var interactor: ItemsListBusinessLogic?
	var router: (NSObjectProtocol & ItemsListRoutingLogic & ItemsListDataPassing)?
	
	// MARK: Object lifecycle
	
	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
		super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
		setup()
	}
	
	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		setup()
	}
	
	// MARK: Setup
	
	private func setup() {
		let viewController = self
		let interactor = ItemsListInteractor()
		let presenter = ItemsListPresenter()
		let router = ItemsListRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		router.viewController = viewController
		router.dataStore = interactor
	}
	
	// MARK: Routing
	
	override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
		if let scene = segue.identifier {
			let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
			if let router = router, router.responds(to: selector) {
				router.perform(selector, with: segue)
			}
		}
	}
	
	@IBOutlet weak var collectionView: UICollectionView!
	@IBOutlet weak var segmentController: UISegmentedControl!
	
	
	// MARK: View lifecycle
	
	override func viewDidLoad() {
		super.viewDidLoad()
		guard var dataStore: ItemsListDataStore = self.interactor as? ItemsListDataStore else {
			return
		}
		doGetItems(dataStore.currentPage)
		dataStore.currentPage += 1
	}
	
	// MARK: Do something
	
	func doGetItems(_ page: Int) {
		let request = ItemsList.GetItems.Request(page: page)
		interactor?.doGetItems(request: request)
	}
	
	func displayItems(viewModel: ItemsList.GetItems.ViewModel) {
		DispatchQueue.main.async {
			self.collectionView.reloadData()
		}
	}
}


extension ItemsListViewController: UICollectionViewDataSource {
	
	func collectionView(_ collectionView: UICollectionView,
						numberOfItemsInSection section: Int) -> Int {
		if let dataStore: ItemsListDataStore = self.interactor as? ItemsListDataStore {
			return dataStore.viewModel?.items?.count ?? 0
		}
		return 0
	}
	
	func collectionView(_ collectionView: UICollectionView,
						cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
		guard let dataStore: ItemsListDataStore = self.interactor as? ItemsListDataStore else {
			return UICollectionViewCell()
		}
		
		
		let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "ItemCell", for: indexPath)
		if let cell = cell as? ItemCollectionViewCell {
			let models: ItemCellModels = ItemCellModels(item: dataStore.viewModel?.items?[indexPath.row])
			cell.setup(models)
		}
		return cell
	}
}


// MARK: - UIScrollViewDelegate
extension ItemsListViewController: UIScrollViewDelegate {
	
	func scrollViewDidScroll(_ scrollView: UIScrollView) {
		guard var dataStore: ItemsListDataStore = self.interactor as? ItemsListDataStore else {
			return
		}
		
		
		let offsetY = scrollView.contentOffset.y
		let contentHeight = scrollView.contentSize.height
		if offsetY > contentHeight - scrollView.frame.size.height {
			self.doGetItems(dataStore.currentPage)
			dataStore.currentPage += 1
		}
	}
}

extension ItemsListViewController {
	
	@IBAction func indexChanged(_ sender: AnyObject) {
		var filter: ((Item, Item) -> Bool)?
		
		switch segmentController.selectedSegmentIndex
		{
		case 0:
			filter = {
				guard let name0 = $0.name else { return false } ;
				guard let name1 = $1.name else { return true} ;
				return name0 < name1
			}
		case 1:
			filter = {
				guard let author0 = $0.author else { return false } ;
				guard let author1 = $1.author else { return true} ;
				return author0 < author1
			}
		default:
			break		}
		if let filter = filter {
			self.interactor?.filterItems(filter: filter)
		}
		
	}
}

